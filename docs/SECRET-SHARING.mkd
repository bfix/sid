
SID Shared Secret Scheme for client documents
=============================================

Processing documents uploaded by clients
----------------------------------------

Assumptions:

1. Confidentiality: documents uploaded by clients should only be visible to
   trusted reviewers.
	  
2. Four-eyes principle: No reviewer can access a client document alone; she/he
   need the co-operation of at least one other trusted reviewer.
	  
3. Uploaded documents and additional files needed to access the documents are
   downloaded from the SID server on a regular basis and distributed to all
   reviewers (everything is encrypted and can therefore be send over insecure
   channels.
	  
4. Each reviewer has PGP/GnuPG installed on his/her computer and knows how to
   use a command line shell. Every reviewer has a key pair (especially created
   for the purpose of reviewing documents).
	  
Step 1: Files involved
----------------------

Each client document send to the SID server result in multiple files
stored in the upload directory (from where these files are downloaded
for distribution among the reviewers).

All files related to a specific client document have a common prefix;
this prefix is a 16-digit unique number; the file names look like this:

	4534645319481941.document.aes256
	4534645319481941.32D0255C.gpg
	4534645319481941.487608D5.gpg
	4534645319481941.B60AE32D.gpg
	4534645319481941.DA714896.gpg
	4534645319481941.E8055A66.gpg

The first file (`*.document.aes256`) contains the encrypted client
document. A key is needed to decrypt the document; this key can only
be created by a specified number of co-operating reviewers. The key is
also unique for each uploaded client document!

All the other files (`*.*.gpg`) are related to the trusted reviewers;
there are as many files as there a reviewers. The second part of the
file name is a 8 digit hexadecimal number that corresponds to the key
id of a reviewer.

Step 2: Recovering the key
--------------------------

The number of co-operating reviewers needed to decrypt a document can
be specified on the server; in this example it is set to "2", so two
reviewers can together decrypt the client document.

Let's assume that Reviewer#1 has the key id "`DA714896`" and Reviewer#2
has the key id "`487608D5`". Both now use PGP/GnuPG to decrypt their
corresponding files (in this example Linux with GnuPG is used):

- - -

*Reviewer 1:*

	$ gpg -o share1 -d 4534645319481941.DA714896.gpg
	
	You need a passphrase to unlock the secret key for
	user: "Reviewer1 Survey <reviewer1@survey.org>"
	2048-bit RSA key, ID 2E62E6F9, created 2012-02-03 (main key ID DA714896)
	
	gpg: encrypted with 2048-bit RSA key, ID 2E62E6F9, created 2012-02-03
	      "Reviewer1 Survey <reviewer1@survey.org>"

- - -

*Reviewer 2:*

	$ gpg -o share2 -d 4534645319481941.487608D5.gpg
	
	You need a passphrase to unlock the secret key for
	user: "Reviewer2 <reviewer2@survey.org>"
	2048-bit RSA key, ID 2D4B56FD, created 2012-02-03 (main key ID 487608D5)
	
	gpg: encrypted with 2048-bit RSA key, ID 2D4B56FD, created 2012-02-03
	      "Reviewer2 <reviewer2@survey.org>"

- - -

The decrypted files are named "`share1`" and "`share2`" in this example,
but the reviewers can use any name for the files they like as long as
the names are unique.

Step 3: Decrypting the client document
--------------------------------------

These share files from the previous step are now exchanged between the
reviewers or they use a common computer to finish the key recovery.
To decrypt the client document the following command is used:

	$ dcd 4534645319481941.document.aes256 share1 share2

The "`dcd`" (decrypt client document) takes file names as arguments; the
first argument is the name of the encrypted client document and the
following arguments are the decrypted shares of the reviewers involved
(in arbitrary sequence).

The result of the operation is a file named "`4534645319481941.document`"
that contains the data uploaded by the client in plain text.
